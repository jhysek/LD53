[gd_scene load_steps=33 format=2]

[ext_resource path="res://components/Drone/indicator.png" type="Texture" id=1]
[ext_resource path="res://components/Drone/Drone.gd" type="Script" id=2]
[ext_resource path="res://assets/light.png" type="Texture" id=3]
[ext_resource path="res://components/Drone/body.png" type="Texture" id=4]
[ext_resource path="res://components/Drone/Indicator.gd" type="Script" id=5]
[ext_resource path="res://components/Drone/shine.png" type="Texture" id=6]
[ext_resource path="res://components/Drone/eyes.png" type="Texture" id=7]
[ext_resource path="res://components/Drone/legs.png" type="Texture" id=8]
[ext_resource path="res://components/Drone/legs_snap.png" type="Texture" id=9]
[ext_resource path="res://components/Drone/ShieldArea.gd" type="Script" id=10]
[ext_resource path="res://assets/teleport.wav" type="AudioStream" id=11]
[ext_resource path="res://assets/fly04.wav" type="AudioStream" id=12]
[ext_resource path="res://assets/clamp.wav" type="AudioStream" id=13]
[ext_resource path="res://assets/clamp_inverted.wav" type="AudioStream" id=14]
[ext_resource path="res://assets/magnet.wav" type="AudioStream" id=15]
[ext_resource path="res://assets/takeoff.wav" type="AudioStream" id=16]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 100, 52.25 )

[sub_resource type="Shader" id=10]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/teleport-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float progress : hint_range(0.0, 1.0);
uniform float noise_desnity = 60;
uniform float beam_size : hint_range(0.01, 0.15);
uniform vec4 color : hint_color = vec4(0.0, 1.02, 1.2, 1.0);

// We are generating our own noise here. You could experiment with the 
// built in SimplexNoise or your own noise texture for other effects.
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

void fragment()
{
	vec4 tex = texture(TEXTURE, UV);
	
	float noise = noise(UV * noise_desnity) * UV.y;
	
	float d1 = step(progress, noise);
	float d2 = step(progress - beam_size, noise);
	
	vec3 beam = vec3(d2 - d1) * color.rgb;
	
	tex.rgb += beam;
	tex.a *= d2;
	
	COLOR = tex;
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/progress = 0.0
shader_param/noise_desnity = 60.0
shader_param/beam_size = null
shader_param/color = Color( 0, 1.02, 1.2, 1 )

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;

uniform vec4 color1 : hint_color;
uniform vec4 color2 : hint_color;
uniform float threshold;
uniform float intensity;
uniform float opacity;
uniform vec4 glow_color : hint_color;

void fragment() {
	// Get the pixel color from the texture
	vec4 pixel_color = texture(TEXTURE, UV);
	
	// Calculate the distance between the pixel color and the first source color
	float distance = length(pixel_color - color1);
	
	// Calculate the distance between the pixel color and the second source color
	float distance_second = length(pixel_color - color2);
	
	// Create a new variable to store the modified glow color
	vec4 modified_glow_color = glow_color;
	
	// Set the alpha value of the modified glow color to the specified opacity
	modified_glow_color.a = opacity;
	
	// If the distance to either source color is below the threshold, set the output color to a blend of the pixel color and the modified glow color
	if (distance < threshold || distance_second < threshold) {
		COLOR = mix(pixel_color, modified_glow_color * intensity, modified_glow_color.a);
	}
	// Otherwise, set the output color to the pixel color
	else {
		COLOR = pixel_color;
	}
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/color1 = Color( 0.329412, 0.792157, 0.403922, 1 )
shader_param/color2 = Color( 0.2, 0.937255, 1, 1 )
shader_param/threshold = null
shader_param/intensity = null
shader_param/opacity = null
shader_param/glow_color = Color( 1, 0.894118, 0.894118, 1 )

[sub_resource type="Animation" id=4]
resource_name = "BounceDown"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("Visual:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.3, 0.5 ),
"transitions": PoolRealArray( 1, 1.1487, 2.82843, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, 20 ), Vector2( 0, -10 ), Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=2]
resource_name = "BounceUp"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("Visual:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.3, 0.5 ),
"transitions": PoolRealArray( 1, 1.1487, 2.82843, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, -20 ), Vector2( 0, 10 ), Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=7]
resource_name = "Idle"
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Visual:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 0.707106, 1.6245 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, 10 ) ]
}

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Visual:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Visual/Body/Eyes:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Visual/Body/Eyes/LeftLight:energy")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Visual/Body/Eyes/RightLight:energy")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("CollisionShape2D:shape:extents")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 100, 52.25 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("CollisionShape2D:position")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 21.75 ) ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("Visual/Body/Legs:scale")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 1, 1.1993 ) ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("Visual/Body:material:shader_param/progress")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/8/type = "value"
tracks/8/path = NodePath("Visual/Body/Legs:position")
tracks/8/interp = 1
tracks/8/loop_wrap = true
tracks/8/imported = false
tracks/8/enabled = true
tracks/8/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 28.1447 ) ]
}
tracks/9/type = "value"
tracks/9/path = NodePath("Visual/Body/Legs:modulate")
tracks/9/interp = 1
tracks/9/loop_wrap = true
tracks/9/imported = false
tracks/9/enabled = true
tracks/9/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}
tracks/10/type = "value"
tracks/10/path = NodePath("Visual/Body/Indicator:modulate")
tracks/10/interp = 1
tracks/10/loop_wrap = true
tracks/10/imported = false
tracks/10/enabled = true
tracks/10/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ) ]
}
tracks/11/type = "value"
tracks/11/path = NodePath("Visual/Body/Indicator/Light2D:enabled")
tracks/11/interp = 1
tracks/11/loop_wrap = true
tracks/11/imported = false
tracks/11/enabled = true
tracks/11/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/12/type = "value"
tracks/12/path = NodePath("Shield:self_modulate")
tracks/12/interp = 1
tracks/12/loop_wrap = true
tracks/12/imported = false
tracks/12/enabled = true
tracks/12/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ) ]
}
tracks/13/type = "value"
tracks/13/path = NodePath("Visual/Body/Indicator:visible")
tracks/13/interp = 1
tracks/13/loop_wrap = true
tracks/13/imported = false
tracks/13/enabled = true
tracks/13/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Animation" id=16]
resource_name = "Shield"
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath("Shield:self_modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.3, 2 ),
"transitions": PoolRealArray( 1, 2.46229, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=6]
resource_name = "TakeOff"
tracks/0/type = "value"
tracks/0/path = NodePath("Visual/Body/Eyes:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0.2, 0.7 ),
"transitions": PoolRealArray( 0.535887, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Visual/Body/Eyes/LeftLight:energy")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.2, 0.7 ),
"transitions": PoolRealArray( 0.535887, 1 ),
"update": 0,
"values": [ 0.0, 0.5 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Visual/Body/Eyes/RightLight:energy")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.2, 0.7 ),
"transitions": PoolRealArray( 0.535887, 1 ),
"update": 0,
"values": [ 0.0, 0.5 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("CollisionShape2D:shape:extents")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.7, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 100, 52.25 ), Vector2( 100, 43.75 ), Vector2( 100, 43.75 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("CollisionShape2D:position")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.7, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 21.75 ), Vector2( 0, 13.25 ), Vector2( 0, 7 ) ]
}

[sub_resource type="Animation" id=12]
resource_name = "TeleportOut"
length = 0.8
tracks/0/type = "value"
tracks/0/path = NodePath("Visual/Body:material:shader_param/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.8 ),
"transitions": PoolRealArray( 2.82843, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Visual/Body/Legs:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 0.267943, 1 ),
"update": 0,
"values": [ Vector2( 0, 28.1447 ), Vector2( 0, -10 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("Visual/Body/Legs:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.4, 0.8 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Visual/Body/Indicator:modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ), Color( 0, 0, 0, 0 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("Visual/Body/Indicator/Light2D:enabled")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("Visual/Body/Indicator:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="CapsuleShape2D" id=13]
radius = 186.0
height = 432.0

[sub_resource type="Shader" id=14]
code = "shader_type canvas_item;


uniform vec4 color: hint_color = vec4(1.0);


float circle(vec2 position, float radius, float feather)
{
	return smoothstep(radius, radius + feather, length(position - vec2(0.5)));
}


void fragment(){
	
	float outer = circle(vec2(UV.x, UV.y), 0.35, 0.01);
	
	float fade_effect = sin(TIME) * 0.01;
	
	float inner = 1.0 - circle(vec2(UV.x, UV.y), 0.275, 0.1 - fade_effect );
	
	COLOR = color;
	COLOR.a -= outer + inner;
	
}"

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 14 )
shader_param/color = Color( 1, 1, 1, 1 )

[sub_resource type="CircleShape2D" id=17]
radius = 305.007

[node name="Drone" type="KinematicBody2D" groups=["Hittable", "Player"]]
position = Vector2( -2, 0 )
script = ExtResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 0, 21.75 )
shape = SubResource( 1 )

[node name="Visual" type="Node2D" parent="."]

[node name="Body" type="Sprite" parent="Visual"]
material = SubResource( 11 )
position = Vector2( -1, -1 )
texture = ExtResource( 4 )

[node name="Indicator" type="Sprite" parent="Visual/Body"]
modulate = Color( 0, 0, 0, 1 )
material = SubResource( 9 )
position = Vector2( 0, 9.09091 )
texture = ExtResource( 1 )
script = ExtResource( 5 )

[node name="Light2D" type="Light2D" parent="Visual/Body/Indicator"]
show_behind_parent = true
position = Vector2( -0.757576, 49.2424 )
scale = Vector2( 1.51515, 6.79654 )
enabled = false
texture = ExtResource( 6 )
texture_scale = 0.2
mode = 2

[node name="Eyes" type="Sprite" parent="Visual/Body"]
modulate = Color( 1, 1, 1, 0 )
position = Vector2( 0, 15.1515 )
texture = ExtResource( 7 )

[node name="LeftLight" type="Light2D" parent="Visual/Body/Eyes"]
position = Vector2( -65.1515, 1.51516 )
rotation = 0.390557
texture = ExtResource( 3 )
offset = Vector2( 0, 106.061 )
texture_scale = 0.2
energy = 0.0

[node name="RightLight" type="Light2D" parent="Visual/Body/Eyes"]
position = Vector2( 65.1515, -1.51516 )
rotation = -0.54043
texture = ExtResource( 3 )
offset = Vector2( 0, 106.061 )
texture_scale = 0.2
energy = 0.0

[node name="Legs" type="Sprite" parent="Visual/Body"]
show_behind_parent = true
position = Vector2( 0, 28.1447 )
scale = Vector2( 1, 1.1993 )
texture = ExtResource( 8 )
offset = Vector2( 0, 22.7273 )

[node name="LegsSnap" type="Sprite" parent="Visual/Body"]
visible = false
show_behind_parent = true
position = Vector2( 0, 28.1447 )
scale = Vector2( 1, 1.1993 )
texture = ExtResource( 9 )
offset = Vector2( 0, 22.7273 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/BounceDown = SubResource( 4 )
anims/BounceUp = SubResource( 2 )
anims/Idle = SubResource( 7 )
anims/RESET = SubResource( 3 )
anims/Shield = SubResource( 16 )
anims/TakeOff = SubResource( 6 )
anims/TeleportOut = SubResource( 12 )

[node name="MagneticField" type="Area2D" parent="."]
position = Vector2( -1, 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="MagneticField"]
position = Vector2( -2, 93 )
shape = SubResource( 13 )

[node name="Timer" type="Timer" parent="."]
one_shot = true

[node name="Shield" type="ColorRect" parent="."]
modulate = Color( 0.784314, 0.968627, 1, 1 )
self_modulate = Color( 1, 1, 1, 0 )
material = SubResource( 15 )
margin_left = -388.0
margin_top = -370.0
margin_right = 384.0
margin_bottom = 391.0

[node name="Sfx" type="Node" parent="."]

[node name="Fly" type="AudioStreamPlayer" parent="Sfx"]
stream = ExtResource( 12 )
volume_db = 2.512

[node name="Shield" type="AudioStreamPlayer" parent="Sfx"]

[node name="Magnet" type="AudioStreamPlayer" parent="Sfx"]
stream = ExtResource( 15 )

[node name="Clamp" type="AudioStreamPlayer" parent="Sfx"]
stream = ExtResource( 13 )
volume_db = -7.034

[node name="Unclamp" type="AudioStreamPlayer" parent="Sfx"]
stream = ExtResource( 14 )
volume_db = -7.034

[node name="TurnOn" type="AudioStreamPlayer" parent="Sfx"]
stream = ExtResource( 16 )

[node name="Teleport" type="AudioStreamPlayer" parent="Sfx"]
stream = ExtResource( 11 )
volume_db = 4.019
pitch_scale = 1.11

[node name="ShieldArea" type="Area2D" parent="." groups=["Hittable"]]
script = ExtResource( 10 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="ShieldArea"]
shape = SubResource( 17 )

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
[connection signal="area_entered" from="MagneticField" to="." method="_on_MagneticField_area_entered"]
[connection signal="body_entered" from="MagneticField" to="." method="_on_MagneticField_body_entered"]
[connection signal="body_exited" from="MagneticField" to="." method="_on_MagneticField_body_exited"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
